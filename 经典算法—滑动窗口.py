"""
该算法属于入门级算法，一般对有规律数组问题求最优解，
也就是说，如果一个数组问题可以用动态规划解，但又可以使用滑动窗口解决，那么往往滑动窗口的效率更高。
对于该问题形成自己的代码框架
算法基本原理：
  滑动窗口算法与动态规划一样，用于求解具有最优性质的问题。滑动窗口一般借助于双指针实现，2个指针之间形成一个窗口，
一个指向窗口的左侧即头指针（head），一个指向窗口右端的下一个元素即尾指针（tail），窗口大小为tail-head。
"""
"""
使用场景：
（1）如题目较简单且是数组或链表问题，往往可以尝试双指针是否可解。
（2）如数组存在规律，可以尝试双指针。
（3）如链表问题限制较多，要求O(1)空间复杂度或者时间复杂度不超过O（*）解决，可以尝试双指针算法。
也就是说，当一个问题比较有规律，或者较为简单，或较为巧妙时，可以尝试双指针（滑动窗口）解法。
"""
"""
思路和大体步骤：
首先，定义变量，对于滑动窗口类的题目，变量通常是最小、大长度等；
第二，定义窗口的首尾端（head和tail）并滑动窗口；
第三，更新需要维护的变量,有的变量需要一个if语句来维护(比如最大最小长度)；
重点 第四，分2种case：
（1） 如果题目的窗口长度固定：用一个if语句判断一下当前窗口长度是否达到了限定长度，如果达到了，窗口左指针前移一个单位，从而保证下一次右指针右移时，窗口长度保持不变,左指针移动之前,先更新Step 1定义的(部分或所有)维护变量，if窗口长度达到了限定长度，更新(部分或所有) 维护变量，窗口左指针前移一个单位保证下一次右指针右移时窗口长度保持不变；
（2） 如果题目的窗口长度可变:此时一般涉及到窗口是否合法的判断，若当前窗口不合法时，用一个while去不断移动窗口左指针,从而剔除非法元素直到窗口再次合法。在左指针移动之前更新Step 1定义的(部分或所有)维护变量，while不合法，更新(部分或所有)维护变量，不断移动窗口左指针直到窗口再次合法。
最后，返回结果
"""


#例题一   无重复字符的最大子串
class Solution:
    """
给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。
输入: s = "abcabcbb"
输出: 3
    """

    def lengthOfLongestSubstring(self, s: str) -> int:
        # Step 1: 定义需要维护的变量, 本题求最大长度，所以需要定义max_len, 该题又涉及去重，因此还需要一个哈希表
        max_len, hashmap = 0, {}
        # Step 2: 定义窗口的首尾端 (start, end)， 然后滑动窗口
        start = 0
        for end in range(len(s)):
            # Step 3
            # 更新需要维护的变量 (max_len, hashmap)
            # i.e. 把窗口末端元素加入哈希表，使其频率加1，并且更新最大长度
            hashmap[s[end]] = hashmap.get(s[end], 0) + 1  #若键不存在就返回0
            if len(hashmap) == end - start + 1:  #字典长度等于窗口长度
                max_len = max(max_len, end - start + 1)   #保存最大的长度
            # Step 4:
            # 根据题意,  题目的窗口长度可变: 这个时候一般涉及到窗口是否合法的问题
            # 这时要用一个while去不断移动窗口左指针, 从而剔除非法元素直到窗口再次合法
            # 当窗口长度大于哈希表长度时候 (说明存在重复元素)，窗口不合法
            # 所以需要不断移动窗口左指针直到窗口再次合法, 同时提前更新需要维护的变量 (hashmap)
            while end - start + 1 > len(hashmap):  #窗口长度大于 ，字典 ，存在重复的
                head = s[start]
                hashmap[head] -= 1 #移除元素
                if hashmap[head] == 0:  #窗口对应的hash 词频为0  则删除元素
                    del hashmap[head]
                start += 1
        # Step 5: 返回答案 (最大长度)
        return max_len


#例题二：字符串的排列
"""
输入一个字符串，打印出该字符串中字符的所有排列。你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。
输入：s = "abc"
输出：["abc","acb","bac","bca","cab","cba"]
"""
class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        # Step 1
        # 定义需要维护的变量
        # 因为和排列相关 (元素相同，顺序可以不同)，使用哈希表  保存有哪些就可以
        hashmap2 = {}
        # Step 1.1: 同时建立s1的哈希表 (这个哈希表不需要维护，为定值)
        hashmap1 = {}
        for char in s1:
            hashmap1[char] = hashmap1.get(char, 0) + 1
        # Step 2: 定义窗口的首尾端 (start, end)， 然后滑动窗口
        start = 0
        for end in range(len(s2)):
            # Step 3: 更新需要维护的变量 (hashmap2)， 如果hashmap1 == hashmap2，代表s2包含s1的排列，直接return
            tail = s2[end]
            hashmap2[tail] = hashmap2.get(tail, 0) + 1
            if hashmap1 == hashmap2:   #表明到了最后一次循环
                    return True

            # Step 4:
            # 根据题意可知窗口长度固定，所以用if
            # 窗口左指针前移一个单位保证窗口长度固定, 同时提前更新需要维护的变量 (hashmap2)
            if end >= len(s1) - 1:
                head = s2[start]
                hashmap2[head] -= 1
                if hashmap2[head] == 0:
                    del hashmap2[head]
                start += 1
        # Step 5： 没有在s2中找到s1的排列，返回False
        return False


"""总结：
若理解滑动窗口算法就可以将同类多个算法题触类旁通,大家可结合模板结合题目,在脑海中模拟窗口的滑动过程,不断加深理解。通过实践的加深,找出数组元素之间的关系。
同理，力扣中题号3、159、209、438、567、643、1695等题目均属于滑动窗口类，可以集中精力实践。

"""